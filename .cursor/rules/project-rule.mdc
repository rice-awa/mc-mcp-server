---
description: 项目的自述文档，用于了解项目
globs: 
alwaysApply: false
---
# Minecraft MCP服务器文档索引

## 项目概述

Minecraft MCP服务器是一个集成系统，由两个核心组件组成：AIAgent(MCP-server)负责管理AI工具和处理LLM交互，以及基于WebSocket和脚本API的MC服务器负责处理游戏交互。系统支持两种请求路径：外部MCP客户端调用和游戏内聊天监听。

## 文档目录

### 1. 项目需求文档
 
- [项目需求描述文档 (PRD)](mdc:docs/prd/pr.md) - 详细描述项目的核心功能、请求路径、用户交互流程和验收标准

### 2. 技术规范文档

- [技术架构文档](mdc:docs/prd/technical_architecture.md) - 描述系统的整体架构、核心组件和技术栈
- [WebSocket通信规范](mdc:docs/prd/websocket_spec.md) - 定义客户端与服务器之间的WebSocket通信协议和脚本API集成
- [MCP集成规范](mdc:docs/prd/mcp_integration.md) - 说明如何集成Model Context Protocol标准和两种请求路径
- [development_guidelines.md](mdc:docs/prd/development_guidelines.md) - 开发的边界限制

### 3. 外部参考文档

- [MCP Python SDK](mdc:docs/MCP_PYTHON_SDK.md) - Model Context Protocol的Python实现参考
- [Minecraft脚本API文档](mdc:https:/learn.microsoft.com/en-us/minecraft/creator/scriptapi) - Minecraft脚本API官方文档

## 系统组件

1. **AIAgent (MCP-server)** - 负责管理AI工具和处理LLM交互
2. **MC服务器** - 基于WebSocket和脚本API的服务器，处理游戏交互

## 请求路径

1. **外部MCP客户端路径** - 外部MCP客户端通过AIAgent与Minecraft交互

2. **游戏内聊天路径** - 玩家通过游戏内聊天触发AIAgent

## 项目结构规范

```
mc-mcp-server/
├── server/
│   ├── __init__.py
│   ├── mc_server.py       # WebSocket服务器实现
│   ├── mcp_server.py      # MCP服务器实现
│   └── utils/
│       ├── __init__.py
│       ├── auth.py        # 认证相关工具
│       └── logging.py     # 日志工具
├── resources/             # MCP资源定义
│   ├── __init__.py
│   ├── player.py
│   └── world.py
├── tools/                 # MCP工具定义
│   ├── __init__.py
│   ├── commands.py
│   └── messages.py
├── config/                # 配置文件
│   ├── default.json
│   └── production.json
├── tests/                 # 测试目录
│   ├── __init__.py
│   ├── test_mc_server.py
│   └── test_mcp_server.py
├── docs/                  # 文档目录
├── main.py                # 主入口文件
├── requirements.txt       # 依赖声明
└── README.md              # 项目说明

```